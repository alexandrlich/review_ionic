#!/usr/bin/env node





// no need to configure below

var fs = require('fs');
var path = require('path');
var sys = require('sys')
var exec = require('child_process').exec;
//for recursive copy
var wrench = require('wrench'),
    util = require('util');

console.log("process.env.CORDOVA_PLATFORMS: "+process.env.CORDOVA_PLATFORMS);
console.log("process.env.MODE: "+process.env.MODE); // custom release\debug var

 
// no need to configure below
//var rootdir = process.argv[2]";
var rootdir = process.cwd();
	
	
var filestocopy;	

var actions;
	
//=============== actual build commands=======================================
if(process.env.CORDOVA_PLATFORMS == 'ios') {	
	console.log("skip this hook")
} else if(process.env.CORDOVA_PLATFORMS == 'android') {

	if(process.env.MODE == 'RELEASE' || process.env.MODE == 'release') {	
	
		actions = [
			moveAndroidNewrelicConfigs,
			moveAndroidCrashlyticsConfigs
		];callback();
	} else {
		console.log("===== DEBUG MODE, no crashlytics,newrelic! ");
		actions = [
			moveAndroidDefaultConfigs
		];callback();
		
	}
} else {
	console.log("platform type is not supported");
	process.exist(1)
	
}	
//======================================================


//helper to copy files
function copyFile(src, dest) {
	var srcfile = path.join(rootdir, src);
	var destfile = path.join(rootdir, dest);
	console.log("copying "+srcfile+" to "+destfile);
	var destdir = path.dirname(destfile);
	if (fs.existsSync(srcfile) && fs.existsSync(destdir)) {
	   fs.createReadStream(srcfile).pipe(
	   fs.createWriteStream(destfile));
	} else {
		console.log('stderr : can not find destination or a source file');
		process.exit(1);
	}

}
function moveAndroidNewrelicConfigs() {
	console.log("move newrelic config files")
	
	//file contains new relic and crashlytic initialization
	copyFile("dev-tools/config/android/release/com/reviyou/android/Reviyou.java", "platforms/android/src/com/reviyou/android/Reviyou.java");
	
	copyFile("dev-tools/newrelic/android/newrelic.android.jar", "platforms/android/libs/newrelic.android.jar");


	callback();
}
//used for release mode
function moveAndroidCrashlyticsConfigs() {
	console.log("move crashlytics config files")
	
	copyFile("dev-tools/config/android/release/AndroidManifest.xml","platforms/android/AndroidManifest.xml");
	
	copyFile("dev-tools/config/android/release/custom_rules.xml","platforms/android/custom_rules.xml");
	
	copyFile("dev-tools/crashlytics/android/crashlytics.jar","platforms/android/libs/crashlytics.jar");
	   

	callback();
}
//used for debug mode to speed up
function moveAndroidDefaultConfigs() {
	copyFile("dev-tools/config/android/debug/AndroidManifest.xml","platforms/android/AndroidManifest.xml");
	copyFile("dev-tools/config/android/debug/custom_rules.xml","platforms/android/custom_rules.xml");
	
	//since cordova 4.2 we need this file for some reason(either previous version generated before and now don't or new version is looking for it)
	copyFile("dev-tools/config/android/debug/com/reviyou/android/Reviyou.java", "platforms/android/src/com/reviyou/android/Reviyou.java");
	
	callback();

}




//executes next command(for async list of commands)
function callback() {
    if (actions.length) {
        actions.shift()();
    } else {
        console.log("020 after hook for android is Done");
    }
}
	
	

	
